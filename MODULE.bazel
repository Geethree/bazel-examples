module(name = "bazel-examples")

bazel_dep(name = "aspect_bazel_lib", version = "2.4.2")
bazel_dep(name = "gazelle", version = "0.35.0")
bazel_dep(name = "platforms", version = "0.0.8")
bazel_dep(name = "rules_oci", version = "1.7.2")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "rules_python", version = "0.31.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.31.0")

################
#### Python ####
################

PYTHON_VERSION = "3.12"

# The following stanze returns a proxy object representing a module extension;
# its methods can be invoked to create module extension tags.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = PYTHON_VERSION,
)

# Use the extension, pip.parse, to call the `pip_repository` rule that invokes
# `pip`, with `incremental` set. The pip call accepts a locked/compiled
# requirements file and installs the dependencies listed within.
# Those dependencies become available in a generated `requirements.bzl` file.
# You can instead check this `requirements.bzl` file into your repo.
# Because this project has different requirements for windows vs other
# operating systems, we have requirements for each.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    # The interpreter_target attribute points to the interpreter to
    # use for running pip commands to download the packages in the
    # requirements file.
    # As a best practice, we use the same interpreter as the toolchain
    # that was configured above; this ensures the same Python version
    # is used for both resolving dependencies and running tests/binaries.
    # If this isn't specified, then you'll get whatever is locally installed
    # on your system.
    hub_name = "pip",
    python_version = PYTHON_VERSION,
    requirements_darwin = "//third_party/python:requirements_darwin.txt",
    requirements_linux = "//third_party/python:requirements_linux.txt",
)

# Imports the pip toolchain generated by the given module extension into the scope of the current module.
use_repo(
    pip,
    "pip",
)

#########
# Docker
#########

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "ubuntu",
    digest = "sha256:67211c14fa74f070d27cc59d69a7fa9aeff8e28ea118ef3babc295a0428a6d21",
    image = "ubuntu",
    platforms = [
        "linux/arm64/v8",
        "linux/amd64",
    ],
)
use_repo(oci, "ubuntu")

# Internal dependencies

gcloud_sdks = use_extension("//third_party/gcloud_sdks:extension.bzl", "gcloud_sdks")
use_repo(
    gcloud_sdks,
    "gcloud_darwin_amd64",
    "gcloud_darwin_arm64",
    "gcloud_linux_amd64",
)
